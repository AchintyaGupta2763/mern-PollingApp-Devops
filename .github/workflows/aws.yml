# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

environment {
    AWS_DEFAULT_REGION = 'us-east-1'
    AWS_ACCOUNT_ID = '266735804669'
    BACKEND_REPO = '266735804669.dkr.ecr.us-east-1.amazonaws.com/mern-backend'
    FRONTEND_REPO = '266735804669.dkr.ecr.us-east-1.amazonaws.com/mern-frontend'
    IMAGE_TAG = "v${BUILD_NUMBER}"
    AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')     // Jenkins credential ID
    AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key') // Jenkins credential ID
}

options {
    skipStagesAfterUnstable()
}

stages {
    stage('Checkout Code') {
        steps {
            git branch: 'main', url: 'https://github.com/your-org/your-mern-repo.git'
        }
    }

    stage('Login to AWS ECR') {
        steps {
            script {
                sh """
                    aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                    aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                    aws configure set default.region $AWS_DEFAULT_REGION

                    aws ecr get-login-password --region $AWS_DEFAULT_REGION | \
                      docker login --username AWS --password-stdin $BACKEND_REPO

                    aws ecr get-login-password --region $AWS_DEFAULT_REGION | \
                      docker login --username AWS --password-stdin $FRONTEND_REPO
                """
            }
        }
    }

    stage('Build Docker Images') {
        steps {
            sh 'docker build -t mern-backend:${IMAGE_TAG} ./backend'
            sh 'docker build -t mern-frontend:${IMAGE_TAG} ./frontend'
        }
    }

    stage('Tag & Push Images to ECR') {
        steps {
            sh """
                docker tag mern-backend:${IMAGE_TAG} $BACKEND_REPO:${IMAGE_TAG}
                docker tag mern-frontend:${IMAGE_TAG} $FRONTEND_REPO:${IMAGE_TAG}

                docker push $BACKEND_REPO:${IMAGE_TAG}
                docker push $FRONTEND_REPO:${IMAGE_TAG}
            """
        }
    }

    stage('Deploy to ECS') {
        steps {
            sh """
                aws ecs update-service --cluster mern-cluster --service backend-service \
                  --force-new-deployment --region $AWS_DEFAULT_REGION

                aws ecs update-service --cluster mern-cluster --service frontend-service \
                  --force-new-deployment --region $AWS_DEFAULT_REGION
            """
        }
    }
}

post {
    success {
        echo '✅ CI/CD pipeline completed successfully.'
    }
    failure {
        echo '❌ Pipeline failed. Please check the Jenkins logs.'
    }
}

